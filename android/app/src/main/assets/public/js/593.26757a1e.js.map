{"version":3,"file":"js/593.26757a1e.js","mappings":"0JACO,MAAMA,UAAsB,KAC/BC,cACIC,SAASC,WACTC,KAAKC,yBAA2B,qBACpC,CACAC,wBAAwBC,GACpB,MAAMH,KAAKI,cAAc,0BAC7B,CACAF,gBAAgBG,GACZ,MAAMC,QAAoBN,KAAKO,eAAeF,GAC9C,IAAKC,EACD,MAAM,IAAIE,MAAMR,KAAKC,0BAEzB,MAAMQ,EAAS,CACXC,MAAO,IAEX,IAAK,MAAMC,KAAcL,EAAa,CAClC,MAAMM,EAAO,CACTC,KAAMF,EACNG,WAAYH,EAAWI,aACvBC,SAAUhB,KAAKiB,mBAAmBN,GAClCO,KAAMlB,KAAKmB,eAAeR,GAC1BS,UAAMC,EACNC,KAAMtB,KAAKuB,eAAeZ,KAEd,OAAZN,QAAgC,IAAZA,OAAqB,EAASA,EAAQmB,YAC1DZ,EAAKa,WAAazB,KAAK0B,gBAAgBf,IAE3CF,EAAOC,MAAMiB,KAAKf,EACtB,CACA,OAAOH,CACX,CACAP,iBAAiBG,GACb,OAAOL,KAAK4B,UAAUC,OAAOC,OAAO,CAAEC,MAAO,CAAC,YAAc1B,GAChE,CACAH,gBAAgBG,GACZ,OAAOL,KAAK4B,UAAUC,OAAOC,OAAO,CAAEC,MAAO,CAAC,UAAW,YAAc1B,GAC3E,CACAH,iBAAiBG,GACb,OAAOL,KAAK4B,UAAUC,OAAOC,OAAO,CAAEC,MAAO,CAAC,YAAc1B,GAChE,CACAH,qBAAqBG,GACjB,IAAI2B,EACJ,MAAMC,GAAqF,QAA1ED,EAAiB,OAAZ3B,QAAgC,IAAZA,OAAqB,EAASA,EAAQ0B,aAA0B,IAAPC,OAAgB,EAASA,EAAGE,KAAK,OAAS,GACvIC,KAA0B,OAAZ9B,QAAgC,IAAZA,OAAqB,EAASA,EAAQ8B,UAC9E,OAAO,IAAIC,SAAQC,IACf,IAAIC,GAAgB,EACpB,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,OACbH,EAAMN,OAASA,EACfM,EAAMJ,SAAWA,EACjBI,EAAMI,iBAAiB,UAAU,KAC7BL,GAAgB,EAChB,MAAM5B,EAAQkC,MAAMC,KAAKN,EAAM7B,OAAS,IACxC2B,EAAQ3B,EAAM,GACf,CAAEoC,MAAM,IAEXC,OAAOJ,iBAAiB,SAASzC,gBACvBF,KAAKgD,KAAK,KACZV,GAGJD,OAAQhB,EAAU,GACnB,CAAEyB,MAAM,IACXP,EAAMU,OAAO,GAErB,CACA/C,sBAAsBU,GAClB,OAAO,IAAIwB,SAAQ,CAACC,EAASa,KACzB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAczC,GACrBuC,EAAOG,OAAS,KACZ,MAAM7C,EAAkC,kBAAlB0C,EAAO1C,OAAsB0C,EAAO1C,OAAS,GAC7D8C,EAAiB9C,EAAO+C,MAAM,WAC9BC,EAASF,EAAe,IAAM,GACpClB,EAAQoB,EAAO,EAEnBN,EAAOO,QAAUC,IACbT,EAAOS,EAAM,CAChB,GAET,CACAxC,eAAeP,GACX,OAAOA,EAAKM,IAChB,CACAD,mBAAmBL,GACf,OAAOA,EAAK8B,IAChB,CACAnB,eAAeX,GACX,OAAOA,EAAKU,IAChB,CACApB,WAAW0D,GACP,OAAO,IAAIxB,SAAQC,GAAWwB,WAAWxB,EAASuB,IACtD,E","sources":["webpack://papillon/./node_modules/@capawesome/capacitor-file-picker/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class FilePickerWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.ERROR_PICK_FILE_CANCELED = 'pickFiles canceled.';\n    }\n    async convertHeicToJpeg(_options) {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async pickFiles(options) {\n        const pickedFiles = await this.openFilePicker(options);\n        if (!pickedFiles) {\n            throw new Error(this.ERROR_PICK_FILE_CANCELED);\n        }\n        const result = {\n            files: [],\n        };\n        for (const pickedFile of pickedFiles) {\n            const file = {\n                blob: pickedFile,\n                modifiedAt: pickedFile.lastModified,\n                mimeType: this.getMimeTypeFromUrl(pickedFile),\n                name: this.getNameFromUrl(pickedFile),\n                path: undefined,\n                size: this.getSizeFromUrl(pickedFile),\n            };\n            if (options === null || options === void 0 ? void 0 : options.readData) {\n                file.data = await this.getDataFromFile(pickedFile);\n            }\n            result.files.push(file);\n        }\n        return result;\n    }\n    async pickImages(options) {\n        return this.pickFiles(Object.assign({ types: ['image/*'] }, options));\n    }\n    async pickMedia(options) {\n        return this.pickFiles(Object.assign({ types: ['image/*', 'video/*'] }, options));\n    }\n    async pickVideos(options) {\n        return this.pickFiles(Object.assign({ types: ['video/*'] }, options));\n    }\n    async openFilePicker(options) {\n        var _a;\n        const accept = ((_a = options === null || options === void 0 ? void 0 : options.types) === null || _a === void 0 ? void 0 : _a.join(',')) || '';\n        const multiple = !!(options === null || options === void 0 ? void 0 : options.multiple);\n        return new Promise(resolve => {\n            let onChangeFired = false;\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = accept;\n            input.multiple = multiple;\n            input.addEventListener('change', () => {\n                onChangeFired = true;\n                const files = Array.from(input.files || []);\n                resolve(files);\n            }, { once: true });\n            // Workaround to detect when Cancel is selected in the File Selection dialog box.\n            window.addEventListener('focus', async () => {\n                await this.wait(1000);\n                if (onChangeFired) {\n                    return;\n                }\n                resolve(undefined);\n            }, { once: true });\n            input.click();\n        });\n    }\n    async getDataFromFile(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n                const result = typeof reader.result === 'string' ? reader.result : '';\n                const splittedResult = result.split('base64,');\n                const base64 = splittedResult[1] || '';\n                resolve(base64);\n            };\n            reader.onerror = error => {\n                reject(error);\n            };\n        });\n    }\n    getNameFromUrl(file) {\n        return file.name;\n    }\n    getMimeTypeFromUrl(file) {\n        return file.type;\n    }\n    getSizeFromUrl(file) {\n        return file.size;\n    }\n    async wait(delayMs) {\n        return new Promise(resolve => setTimeout(resolve, delayMs));\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["FilePickerWeb","constructor","super","arguments","this","ERROR_PICK_FILE_CANCELED","async","_options","unimplemented","options","pickedFiles","openFilePicker","Error","result","files","pickedFile","file","blob","modifiedAt","lastModified","mimeType","getMimeTypeFromUrl","name","getNameFromUrl","path","undefined","size","getSizeFromUrl","readData","data","getDataFromFile","push","pickFiles","Object","assign","types","_a","accept","join","multiple","Promise","resolve","onChangeFired","input","document","createElement","type","addEventListener","Array","from","once","window","wait","click","reject","reader","FileReader","readAsDataURL","onload","splittedResult","split","base64","onerror","error","delayMs","setTimeout"],"sourceRoot":""}